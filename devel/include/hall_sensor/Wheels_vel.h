// Generated by gencpp from file hall_sensor/Wheels_vel.msg
// DO NOT EDIT!


#ifndef HALL_SENSOR_MESSAGE_WHEELS_VEL_H
#define HALL_SENSOR_MESSAGE_WHEELS_VEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hall_sensor
{
template <class ContainerAllocator>
struct Wheels_vel_
{
  typedef Wheels_vel_<ContainerAllocator> Type;

  Wheels_vel_()
    : fl(0.0)
    , fr(0.0)
    , rl(0.0)
    , rr(0.0)  {
    }
  Wheels_vel_(const ContainerAllocator& _alloc)
    : fl(0.0)
    , fr(0.0)
    , rl(0.0)
    , rr(0.0)  {
  (void)_alloc;
    }



   typedef float _fl_type;
  _fl_type fl;

   typedef float _fr_type;
  _fr_type fr;

   typedef float _rl_type;
  _rl_type rl;

   typedef float _rr_type;
  _rr_type rr;





  typedef boost::shared_ptr< ::hall_sensor::Wheels_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hall_sensor::Wheels_vel_<ContainerAllocator> const> ConstPtr;

}; // struct Wheels_vel_

typedef ::hall_sensor::Wheels_vel_<std::allocator<void> > Wheels_vel;

typedef boost::shared_ptr< ::hall_sensor::Wheels_vel > Wheels_velPtr;
typedef boost::shared_ptr< ::hall_sensor::Wheels_vel const> Wheels_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hall_sensor::Wheels_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hall_sensor::Wheels_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hall_sensor::Wheels_vel_<ContainerAllocator1> & lhs, const ::hall_sensor::Wheels_vel_<ContainerAllocator2> & rhs)
{
  return lhs.fl == rhs.fl &&
    lhs.fr == rhs.fr &&
    lhs.rl == rhs.rl &&
    lhs.rr == rhs.rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hall_sensor::Wheels_vel_<ContainerAllocator1> & lhs, const ::hall_sensor::Wheels_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hall_sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hall_sensor::Wheels_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hall_sensor::Wheels_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hall_sensor::Wheels_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "291d0a1bb554e9cecb818a219ca75ef0";
  }

  static const char* value(const ::hall_sensor::Wheels_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x291d0a1bb554e9ceULL;
  static const uint64_t static_value2 = 0xcb818a219ca75ef0ULL;
};

template<class ContainerAllocator>
struct DataType< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hall_sensor/Wheels_vel";
  }

  static const char* value(const ::hall_sensor::Wheels_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 fl\n"
"float32 fr\n"
"float32 rl\n"
"float32 rr\n"
;
  }

  static const char* value(const ::hall_sensor::Wheels_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fl);
      stream.next(m.fr);
      stream.next(m.rl);
      stream.next(m.rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wheels_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hall_sensor::Wheels_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hall_sensor::Wheels_vel_<ContainerAllocator>& v)
  {
    s << indent << "fl: ";
    Printer<float>::stream(s, indent + "  ", v.fl);
    s << indent << "fr: ";
    Printer<float>::stream(s, indent + "  ", v.fr);
    s << indent << "rl: ";
    Printer<float>::stream(s, indent + "  ", v.rl);
    s << indent << "rr: ";
    Printer<float>::stream(s, indent + "  ", v.rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HALL_SENSOR_MESSAGE_WHEELS_VEL_H
