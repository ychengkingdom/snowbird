// Generated by gencpp from file actuator/Actuator.msg
// DO NOT EDIT!


#ifndef ACTUATOR_MESSAGE_ACTUATOR_H
#define ACTUATOR_MESSAGE_ACTUATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actuator
{
template <class ContainerAllocator>
struct Actuator_
{
  typedef Actuator_<ContainerAllocator> Type;

  Actuator_()
    : strDirec(0)
    , strAng(0)
    , accDire(0)
    , accVal(0)  {
    }
  Actuator_(const ContainerAllocator& _alloc)
    : strDirec(0)
    , strAng(0)
    , accDire(0)
    , accVal(0)  {
  (void)_alloc;
    }



   typedef uint8_t _strDirec_type;
  _strDirec_type strDirec;

   typedef uint8_t _strAng_type;
  _strAng_type strAng;

   typedef uint8_t _accDire_type;
  _accDire_type accDire;

   typedef uint8_t _accVal_type;
  _accVal_type accVal;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(left)
  #undef left
#endif
#if defined(_WIN32) && defined(right)
  #undef right
#endif
#if defined(_WIN32) && defined(back)
  #undef back
#endif
#if defined(_WIN32) && defined(forward)
  #undef forward
#endif

  enum {
    left = 0u,
    right = 1u,
    back = 0u,
    forward = 1u,
  };


  typedef boost::shared_ptr< ::actuator::Actuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actuator::Actuator_<ContainerAllocator> const> ConstPtr;

}; // struct Actuator_

typedef ::actuator::Actuator_<std::allocator<void> > Actuator;

typedef boost::shared_ptr< ::actuator::Actuator > ActuatorPtr;
typedef boost::shared_ptr< ::actuator::Actuator const> ActuatorConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actuator::Actuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actuator::Actuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actuator::Actuator_<ContainerAllocator1> & lhs, const ::actuator::Actuator_<ContainerAllocator2> & rhs)
{
  return lhs.strDirec == rhs.strDirec &&
    lhs.strAng == rhs.strAng &&
    lhs.accDire == rhs.accDire &&
    lhs.accVal == rhs.accVal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actuator::Actuator_<ContainerAllocator1> & lhs, const ::actuator::Actuator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actuator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::actuator::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actuator::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuator::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actuator::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuator::Actuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actuator::Actuator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actuator::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a5f96192a9e0f688db79bb649c89f55";
  }

  static const char* value(const ::actuator::Actuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a5f96192a9e0f68ULL;
  static const uint64_t static_value2 = 0x8db79bb649c89f55ULL;
};

template<class ContainerAllocator>
struct DataType< ::actuator::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actuator/Actuator";
  }

  static const char* value(const ::actuator::Actuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actuator::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 strDirec\n"
"uint8 strAng\n"
"uint8 accDire\n"
"uint8 accVal\n"
"\n"
"uint8 left = 0\n"
"uint8 right = 1\n"
"uint8 back = 0\n"
"uint8 forward = 1\n"
;
  }

  static const char* value(const ::actuator::Actuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actuator::Actuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.strDirec);
      stream.next(m.strAng);
      stream.next(m.accDire);
      stream.next(m.accVal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actuator::Actuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actuator::Actuator_<ContainerAllocator>& v)
  {
    s << indent << "strDirec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.strDirec);
    s << indent << "strAng: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.strAng);
    s << indent << "accDire: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accDire);
    s << indent << "accVal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accVal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTUATOR_MESSAGE_ACTUATOR_H
